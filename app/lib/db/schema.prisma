generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentType {
  VIDEO
  AUDIO
  ARTICLE
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  walletAddress String         @unique
  isCreator     Boolean        @default(false)
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  contents      Content[]
  payments      PaymentIntent[]
}

model Content {
  id          String        @id @default(cuid())
  title       String
  description String
  type        ContentType
  status      ContentStatus @default(DRAFT)
  price       Float
  contentUrl  String
  previewUrl  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id])
  payments    PaymentIntent[]

  @@index([creatorId])
}

model PaymentIntent {
  id          String   @id @default(cuid())
  contentId   String
  amount      Float
  currency    String
  status      String   // PENDING, COMPLETED, FAILED
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content     Content  @relation(fields: [contentId], references: [id])
  creator     User     @relation(fields: [creatorId], references: [id])

  @@index([contentId])
  @@index([creatorId])
} 